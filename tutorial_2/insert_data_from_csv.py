
import logging
import csv
from mydb_connection import connect_to_db

logging.basicConfig(level=logging.INFO)

def read_csv_file(csv_file_path):
    try:
        with open(csv_file_path, 'r') as f:
            reader = csv.DictReader(f)
            return list(reader)
    except Exception as e:
        logging.info(f"Error reading CSV file: {e}")
        return None
    

def insert_data_from_csv(database_name, query, values):
    try:
        conn = connect_to_db(database_name)
        if conn:
            cur = conn.cursor()
            cur.execute(query, values)
            conn.commit()
            cur.close()
            conn.close()
        else:
            logging.info("Failed to connect to PostgreSQL.")
    except Exception as e:
        logging.error(f"Error inserting data: {e}")

missing_states_ids = {49160, 16394, 40970, 45069, 16397, 16400, 32785, 40983, 24600, 24602, 20510, 24609, 36900, 40998, 32807, 16427, 28715, 48, 45110, 28739, 24665, 28763, 41056, 8297, 8298, 41067, 28780, 32877, 115, 24693, 16502, 36986, 32891, 8319, 24703, 4226, 36997, 41095, 45195, 12429, 28820, 16545, 12463, 49338, 20668, 49340, 190, 37054, 32959, 28866, 41156, 8389, 37063, 45258, 49358, 49360, 214, 37079, 16603, 12507, 37083, 32992, 12513, 4325, 45285, 20711, 49387, 28912, 49393, 8442, 4346, 12539, 45308, 41245, 45343, 4386, 16680, 8498, 4414, 8515, 45382, 41289, 33103, 37199, 8536, 4441, 33116, 37218, 29029, 8552, 41321, 37230, 37231, 33136, 4470, 8566, 49528, 41338, 33148, 24960, 4484, 24965, 33159, 12683, 397, 20878, 45454, 12685, 12690, 16786, 411, 33184, 37282, 45476, 41383, 4522, 25012, 29110, 37302, 37303, 12730, 33224, 12746, 20938, 37326, 25039, 16851, 4564, 25045, 33239, 49627, 25052, 41441, 12780, 37366, 37367, 25078, 4601, 8694, 4610, 45570, 16908, 8717, 37396, 45589, 49687, 45591, 37407, 33312, 16931, 12835, 555, 37427, 21044, 33335, 4671, 8768, 4674, 578, 21063, 4685, 33361, 49751, 25177, 49765, 33383, 29288, 45673, 49768, 8813, 25199, 29303, 49784, 25213, 17022, 25221, 25224, 4745, 25233, 21139, 33428, 17046, 25239, 49822, 41630, 12964, 45742, 21169, 29362, 692, 33461, 29365, 17081, 29376, 12995, 49860, 33478, 33481, 4813, 8920, 4827, 37597, 8928, 737, 29410, 25315, 33507, 33510, 37613, 25327, 29426, 41717, 37628, 49918, 13058, 772, 780, 49932, 8973, 41740, 25360, 8986, 41758, 45863, 21288, 45864, 49967, 37684, 49986, 45894, 45903, 13142, 4951, 21338, 50016, 9057, 21354, 41837, 13166, 884, 25462, 45946, 21374, 25472, 897, 41858, 901, 13198, 33679, 21391, 13199, 914, 33682, 33685, 45973, 5019, 50079, 45983, 41889, 21415, 25516, 21424, 50098, 17332, 50104, 21435, 9148, 960, 21443, 41926, 17353, 46027, 46035, 21462, 5082, 17379, 17381, 13286, 37862, 41973, 9207, 33784, 21496, 1024, 21506, 37891, 29700, 17411, 5130, 37902, 17424, 21522, 29718, 42009, 5149, 29728, 37923, 29735, 37929, 29738, 13356, 17456, 5169, 33841, 13369, 5182, 50238, 33856, 21568, 29762, 50248, 9292, 33870, 21585, 9298, 46163, 5204, 5206, 13402, 13403, 50275, 13413, 21606, 17519, 50290, 38002, 38005, 9335, 29818, 46211, 17541, 38022, 17550, 29839, 38031, 29841, 17554, 33938, 29844, 13456, 13481, 50346, 25771, 1196, 1197, 21675, 38064, 29872, 13494, 21687, 50363, 25793, 17602, 42181, 21705, 21710, 25811, 21715, 17623, 42199, 9438, 1255, 34023, 9452, 46317, 46319, 21743, 1275, 50432, 42240, 9476, 50437, 34054, 50443, 34064, 5396, 42262, 50462, 13598, 1311, 17702, 38183, 13608, 9521, 5425, 50492, 34110, 38208, 30017, 13638, 50502, 42312, 38227, 42331, 34140, 5472, 25952, 46438, 38253, 21870, 9592, 21881, 13692, 38283, 1421, 46480, 17811, 9625, 42401, 46498, 21925, 38313, 13747, 13756, 9662, 30153, 13770, 1485, 34256, 5585, 13780, 9687, 17895, 38380, 38386, 26100, 5623, 5627, 38397, 5629, 22015, 26112, 22031, 1556, 34329, 9769, 42538, 38446, 1588, 34357, 34361, 42554, 46654, 38468, 17992, 34376, 46673, 18010, 1638, 50790, 13931, 34414, 1646, 34416, 26234, 9852, 46719, 30335, 38534, 30343, 34440, 46730, 42638, 22159, 1682, 13975, 42648, 18080, 34467, 30372, 18088, 18089, 9901, 18096, 30386, 18101, 22197, 30391, 9911, 18109, 26302, 42686, 42688, 42690, 1732, 14023, 9937, 34516, 1750, 50905, 5855, 26336, 30436, 14054, 5866, 22252, 42735, 5876, 9973, 50934, 5887, 50946, 5891, 38664, 30472, 34570, 46859, 46858, 14096, 22292, 14105, 34594, 46884, 18226, 22325, 26427, 18235, 42817, 30531, 51012, 26435, 22339, 38730, 18255, 42831, 1873, 14159, 34644, 38741, 46937, 1886, 34655, 18277, 42860, 22381, 1902, 46961, 10099, 18291, 46986, 6028, 14225, 10136, 30623, 1954, 34724, 6053, 10150, 10151, 47047, 1997, 22479, 22484, 34773, 14304, 47076, 26599, 30697, 26601, 26602, 34798, 38896, 51185, 6132, 10228, 26617, 34813, 30717, 2046, 10250, 18451, 43030, 14363, 30754, 43050, 30766, 2099, 14392, 43067, 47166, 47169, 14401, 10305, 43075, 26693, 26695, 26696, 14414, 14418, 2137, 2138, 26722, 2147, 2149, 10345, 34921, 14449, 6258, 26746, 18560, 18561, 6276, 6277, 39048, 26762, 47243, 39057, 39058, 47257, 14493, 14497, 34984, 26797, 6323, 14534, 14535, 6344, 22728, 30922, 18636, 2254, 35023, 39119, 14546, 39129, 43225, 14555, 22749, 2271, 2275, 26858, 30956, 22764, 35057, 22774, 47359, 2314, 43280, 22815, 35106, 35107, 35109, 26920, 47408, 2361, 2363, 6461, 43330, 43332, 14660, 35146, 6474, 14668, 22861, 39252, 35156, 10585, 31071, 6495, 47456, 31074, 14690, 39268, 18794, 6507, 14700, 22903, 2425, 47483, 18813, 6527, 22919, 18825, 14732, 10652, 43427, 35244, 47543, 18876, 47548, 10689, 35266, 27074, 14789, 10698, 27083, 27092, 39380, 35289, 23014, 18919, 18921, 27115, 31212, 6637, 6643, 2547, 10739, 2549, 27131, 39419, 6654, 2563, 27148, 39446, 18966, 10778, 18970, 31266, 27178, 14890, 10808, 47674, 35392, 35393, 10818, 31303, 10825, 2645, 19032, 35418, 23131, 10844, 2657, 31329, 23146, 27256, 23166, 43647, 43655, 10891, 47755, 19089, 23191, 31383, 6818, 15012, 27309, 47789, 31407, 10928, 31409, 15022, 15027, 2739, 43705, 6841, 39612, 47805, 39614, 10943, 10948, 2761, 31441, 47826, 19155, 27346, 39638, 2787, 23267, 43748, 2793, 15084, 15087, 2806, 43800, 39704, 31514, 31516, 6941, 23329, 19235, 39716, 47911, 39720, 15145, 23338, 27435, 19242, 47917, 11055, 2873, 2875, 2876, 2877, 35647, 19266, 31558, 23367, 23366, 39753, 27467, 19276, 27469, 19284, 15190, 23382, 23387, 47964, 35680, 11106, 35686, 23399, 23403, 27503, 19314, 47988, 27509, 47990, 35705, 39808, 48003, 23428, 35718, 39814, 31628, 2964, 15254, 15256, 23449, 31643, 2973, 48036, 23462, 27558, 11178, 7085, 31663, 27568, 35761, 35765, 27576, 35778, 19395, 31682, 3010, 39879, 35786, 35791, 3028, 39895, 31707, 48100, 3048, 44009, 11246, 44026, 44029, 39934, 39939, 23559, 39953, 23572, 19477, 19482, 44070, 48176, 44081, 11316, 11318, 23608, 7228, 48192, 7232, 27719, 7242, 11338, 11344, 19538, 11348, 40021, 3159, 15454, 15459, 31846, 44136, 35952, 3188, 48246, 15478, 11385, 11394, 19598, 36005, 11432, 40106, 15531, 11437, 44206, 3250, 3253, 27829, 23740, 36031, 31937, 7362, 36046, 3280, 3282, 15571, 23766, 44246, 15578, 19676, 11485, 36064, 40162, 48355, 36068, 27874, 48359, 23784, 19689, 27885, 31991, 32001, 3331, 7434, 48395, 40205, 19734, 19736, 48409, 15645, 11556, 23847, 11561, 11569, 44339, 48437, 36155, 40255, 11586, 23878, 19786, 44373, 32085, 48472, 23899, 7517, 40287, 44385, 32110, 11634, 40309, 44414, 40320, 28032, 32129, 32133, 7559, 48521, 3468, 28051, 32163, 23982, 32176, 40370, 28082, 32183, 3514, 15808, 15814, 28104, 11732, 11734, 40414, 40415, 15842, 11752, 48621, 3567, 19963, 11772, 15869, 24062, 11774, 28166, 24071, 11787, 28185, 32288, 32293, 3624, 48680, 11818, 20015, 7735, 36409, 20032, 44611, 48708, 3651, 20040, 7756, 48724, 15957, 7770, 40546, 40549, 20072, 3691, 36464, 40565, 32383, 7809, 48775, 40588, 40589, 7822, 36498, 16021, 11926, 40600, 3741, 24223, 40611, 20139, 44719, 24241, 7857, 28344, 3782, 16073, 32462, 28367, 40660, 44756, 7894, 36573, 48862, 40672, 12004, 32491, 7922, 40695, 36605, 16125, 40701, 3837, 36609, 12032, 16127, 28421, 36617, 36630, 32537, 24348, 7968, 7971, 28467, 20287, 32576, 3905, 16210, 8020, 12117, 20315, 28507, 44894, 44897, 36711, 24424, 44914, 28544, 20359, 49036, 24463, 3986, 8082, 16275, 20370, 3997, 16286, 32674, 49061, 16303, 28592, 36786, 16306, 20408, 44984, 16319, 4031, 12225, 32706, 24514, 12233, 45005, 4046, 28624, 12242, 45011, 4054, 45022, 8158, 20449, 40930, 36836, 28647, 16363, 49132, 16366, 12274, 8180, 24571, 8191}


def insert_missing_states(missing_state_ids):
    query = "INSERT INTO states (id, name, uf, country_id) VALUES (%s, %s, %s, %s) ON CONFLICT (id) DO NOTHING"
    for state_id in missing_state_ids:
        # Use placeholder values for name, uf, and country_id
        values = (state_id, f"State {state_id}", "XX", 1)
        insert_data_from_csv("tutorial2_db", query, values)
    logging.info(f"Inserted {len(missing_state_ids)} missing states.")


def get_existing_state_ids(database_name, checked_table):
    conn = connect_to_db(database_name)
    if conn:
        cur = conn.cursor()
        cur.execute(f"SELECT id FROM {checked_table}")
        ids = {row[0] for row in cur.fetchall()}
        cur.close()
        conn.close()
        return ids
    return set()

def insert_cities_data():
    dataset = 'cities'
    csv_file_path = f"tutorial_2/files/{dataset}.csv"
    data = read_csv_file(csv_file_path)
    if data:
        # FIX: Check state_id existence in 'states' table, not 'cities'
        existing_state_ids = get_existing_state_ids("tutorial2_db", "states")
        missing = set(int(row["state_id"]) for row in data) - existing_state_ids
        if missing:
            print(f"Missing state_id(s) in states table: {missing}")
        else:
            query = f"INSERT INTO {dataset} (id, city_name, state_id) VALUES (%s, %s, %s)"
            for row in data:
                values = (int(row["id"]), row["city_name"], int(row["state_id"]))
                insert_data_from_csv("tutorial2_db", query, values)
            logging.info(f"Data inserted successfully into table {dataset}.")
    else:
        logging.info("No data to insert.")

def insert_address_data():
    dataset = 'addresses'
    csv_file_path = f"tutorial_2/files/{dataset}.csv"
    data = read_csv_file(csv_file_path)
    if data:
        existing_city_ids = get_existing_state_ids("tutorial2_db", "cities")
        used_city_ids = set()
        valid_rows = []
        for row in data:
            original_city_id = int(row["city_id"])
            city_id = original_city_id
            # Increment city_id until it's unique in this batch and exists in cities table
            while city_id in used_city_ids or city_id not in existing_city_ids:
                city_id += 1
            used_city_ids.add(city_id)
            # Update the row with the new city_id
            row["city_id"] = city_id
            valid_rows.append(row)
        if valid_rows:
            query = f"INSERT INTO {dataset} (id,street,number,city_id) VALUES (%s, %s, %s, %s)"
            for row in valid_rows:
                values = (int(row["id"]), row["street"], int(row["number"]), int(row["city_id"]))
                insert_data_from_csv("tutorial2_db", query, values)
            logging.info(f"Inserted {len(valid_rows)} addresses with unique city_id(s).")
        else:
            logging.info("No valid addresses to insert.")
    else:
        logging.info("No data to insert.")

if __name__ == "__main__":
    # insert_missing_states(missing_states_ids)
    # insert_cities_data()
    insert_address_data()

